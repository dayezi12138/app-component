package com.zh.xfz.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zh.xfz.db.bean.Tenant;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TENANT".
*/
public class TenantDao extends AbstractDao<Tenant, Long> {

    public static final String TABLENAME = "TENANT";

    /**
     * Properties of entity Tenant.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "userId");
        public final static Property TenantId = new Property(2, int.class, "tenantId", false, "tenantId");
        public final static Property TenantName = new Property(3, String.class, "tenantName", false, "tenantName");
        public final static Property IsFirst = new Property(4, boolean.class, "isFirst", false, "isFirst");
    }


    public TenantDao(DaoConfig config) {
        super(config);
    }
    
    public TenantDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TENANT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"userId\" INTEGER," + // 1: userId
                "\"tenantId\" INTEGER NOT NULL ," + // 2: tenantId
                "\"tenantName\" TEXT," + // 3: tenantName
                "\"isFirst\" INTEGER NOT NULL );"); // 4: isFirst
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TENANT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Tenant entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
        stmt.bindLong(3, entity.getTenantId());
 
        String tenantName = entity.getTenantName();
        if (tenantName != null) {
            stmt.bindString(4, tenantName);
        }
        stmt.bindLong(5, entity.getIsFirst() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Tenant entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
        stmt.bindLong(3, entity.getTenantId());
 
        String tenantName = entity.getTenantName();
        if (tenantName != null) {
            stmt.bindString(4, tenantName);
        }
        stmt.bindLong(5, entity.getIsFirst() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Tenant readEntity(Cursor cursor, int offset) {
        Tenant entity = new Tenant( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.getInt(offset + 2), // tenantId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tenantName
            cursor.getShort(offset + 4) != 0 // isFirst
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Tenant entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTenantId(cursor.getInt(offset + 2));
        entity.setTenantName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsFirst(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Tenant entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Tenant entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Tenant entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
