package com.zh.xfz.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zh.xfz.db.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "userId");
        public final static Property ChineseName = new Property(2, String.class, "chineseName", false, "chineseName");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "mobile");
        public final static Property UserIcon = new Property(4, String.class, "userIcon", false, "userIcon");
        public final static Property WXOpenID = new Property(5, String.class, "wXOpenID", false, "wXOpenID");
        public final static Property Token = new Property(6, String.class, "token", false, "token");
        public final static Property Openid = new Property(7, String.class, "openid", false, "openid");
        public final static Property Unionid = new Property(8, String.class, "unionid", false, "unionid");
        public final static Property AccessToken = new Property(9, String.class, "accessToken", false, "accessToken");
        public final static Property CreateTime = new Property(10, java.util.Date.class, "createTime", false, "createTime");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"userId\" INTEGER," + // 1: userId
                "\"chineseName\" TEXT," + // 2: chineseName
                "\"mobile\" TEXT," + // 3: mobile
                "\"userIcon\" TEXT," + // 4: userIcon
                "\"wXOpenID\" TEXT," + // 5: wXOpenID
                "\"token\" TEXT," + // 6: token
                "\"openid\" TEXT," + // 7: openid
                "\"unionid\" TEXT," + // 8: unionid
                "\"accessToken\" TEXT," + // 9: accessToken
                "\"createTime\" INTEGER);"); // 10: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String chineseName = entity.getChineseName();
        if (chineseName != null) {
            stmt.bindString(3, chineseName);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(5, userIcon);
        }
 
        String wXOpenID = entity.getWXOpenID();
        if (wXOpenID != null) {
            stmt.bindString(6, wXOpenID);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(8, openid);
        }
 
        String unionid = entity.getUnionid();
        if (unionid != null) {
            stmt.bindString(9, unionid);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(10, accessToken);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(11, createTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String chineseName = entity.getChineseName();
        if (chineseName != null) {
            stmt.bindString(3, chineseName);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String userIcon = entity.getUserIcon();
        if (userIcon != null) {
            stmt.bindString(5, userIcon);
        }
 
        String wXOpenID = entity.getWXOpenID();
        if (wXOpenID != null) {
            stmt.bindString(6, wXOpenID);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(7, token);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(8, openid);
        }
 
        String unionid = entity.getUnionid();
        if (unionid != null) {
            stmt.bindString(9, unionid);
        }
 
        String accessToken = entity.getAccessToken();
        if (accessToken != null) {
            stmt.bindString(10, accessToken);
        }
 
        java.util.Date createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(11, createTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // chineseName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userIcon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // wXOpenID
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // token
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // openid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // unionid
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // accessToken
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setChineseName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserIcon(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWXOpenID(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setToken(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOpenid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUnionid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAccessToken(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
